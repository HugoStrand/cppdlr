cppdlr
######



Classes
-------

.. table::
   :widths: 40 60


   +--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`fineparams <cppdlr__fineparams>`                 | Class containing parameters for fine composite Chebyshev grid
 discretizations of imaginary time and frequency                                                                                                              |
   +--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`barycheb <cppdlr__barycheb>`                     |                                                                                                                                                                                                                             |
   +--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`make_common_helper <cppdlr__make_common_helper>` | Get type of given nda MemoryArray with scalar value type replaced by
 common type of two given types (real if both are real, complex otherwise)                                                                             |
   +--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`imfreq_ops <cppdlr__imfreq_ops>`                 | Class responsible for all DLR imaginary frequency operations, including
 building imaginary frequency grid and transformations.

 \note First dimension of all Green's function and coefficient arrays must be
 DLR rank r. |
   +--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`imtime_ops <cppdlr__imtime_ops>`                 | Class responsible for all DLR imaginary time operations, including
 building imaginary time grid and transformations.

 \note First dimension of all Green's function and coefficient arrays must be
 DLR rank r.           |
   +--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`dyson_it <cppdlr__dyson_it>`                     | Class for solving Dyson equation in imaginary time                                                                                                                                                                          |
   +--------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. toctree::
    :hidden:

    cppdlr/fineparams
    cppdlr/barycheb
    cppdlr/make_common_helper
    cppdlr/imfreq_ops
    cppdlr/imtime_ops
    cppdlr/dyson_it


Functions
---------

.. table::
   :widths: 40 60


   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`k_it <cppdlr__k_it>`                   | Evaluate analytic continuation kernel in imaginary time (relative
 time format) using dimensionless variables (beta = 1)                                                                                                           |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`k_it_abs <cppdlr__k_it_abs>`           | Evaluate analytic continuation kernel in imaginary time (absolute
 time format) using dimensionless variables (beta = 1)                                                                                                           |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`k_if <cppdlr__k_if>`                   | Evaluate analytic continuation kernel in imaginary frequency using
 dimensionless variables (beta = 1)                                                                                                                             |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`build_rf_fine <cppdlr__build_rf_fine>` | Build fine composite Chebyshev grid in real frequency                                                                                                                                                                              |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`build_it_fine <cppdlr__build_it_fine>` | Get fine composite Chebyshev grid in imaginary time                                                                                                                                                                                |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`build_k_it <cppdlr__build_k_it>`       | Get imaginary time discretization of analytic continuation kernel                                                                                                                                                                  |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`build_k_if <cppdlr__build_k_if>`       | Get imaginary frequency discretization of analytic continuation kernel                                                                                                                                                             |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`geterr_k_it <cppdlr__geterr_k_it>`     | Get error of fine composite Chebyshev discretization of analytic
 continuation kernel in imaginary time                                                                                                                            |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`build_dlr_rf <cppdlr__build_dlr_rf>`   | Construct DLR basis by obtaining DLR frequencies                                                                                                                                                                                   |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`pivrgs <cppdlr__pivrgs>`               | Rank-revealing pivoted reorthogonalized Gram-Schmidt

 Determine the epsilon-rank of a matrix and return an orthogonal basis of
 its epsilon-row space.

 This is a translation of the Fortran subroutine "qrdgrm" by V.  Rokhlin. |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`eqptsrel <cppdlr__eqptsrel>`           | Get grid of equispaced points on [0,1] in relative time format                                                                                                                                                                     |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`rel2abs <cppdlr__rel2abs>`             | Convert points on [0,1] from relative to absolute time format                                                                                                                                                                      |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`abs2rel <cppdlr__abs2rel>`             | Convert points on [0,1] from absolute to relative time format                                                                                                                                                                      |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`arraymult <cppdlr__arraymult>`         | Contract the last dimension of an array a with the first dimension of
 an array b                                                                                                                                                  |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`adapgl <cppdlr__adapgl>`               | Quick and dirty adaptive Gauss quadrature

 This function implements adaptive Gauss-Legendre quadrature with local error
 estimation only, using a stack.                                                                          |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`gaussquad <cppdlr__gaussquad>`         | Gauss-Legendre nodes and weights

 Uses Newton iteration to obtain the Gauss-Legendre nodes and weights                                                                                                                            |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`leg_eval <cppdlr__leg_eval>`           | Evaluate Legendre polynomial of degree n and its derivative

 Uses Legendre three-term recurrence                                                                                                                                  |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`free_gf <cppdlr__free_gf>`             | Compute free-particle imaginary time Green's function for a given
 Hamiltonian

 The Green's function is computed by diagonalizing the Hamiltonian, and is
 returned by its values at the DLR imaginary time nodes.                |
   +----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. toctree::
    :hidden:

    cppdlr/k_it
    cppdlr/k_it_abs
    cppdlr/k_if
    cppdlr/build_rf_fine
    cppdlr/build_it_fine
    cppdlr/build_k_it
    cppdlr/build_k_if
    cppdlr/geterr_k_it
    cppdlr/build_dlr_rf
    cppdlr/pivrgs
    cppdlr/eqptsrel
    cppdlr/rel2abs
    cppdlr/abs2rel
    cppdlr/arraymult
    cppdlr/adapgl
    cppdlr/gaussquad
    cppdlr/leg_eval
    cppdlr/free_gf